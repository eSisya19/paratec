// js/performance_reviews.js

window.performance_reviews = {
    html: `
        <div class="card">
            <div class="card-header">
                <div id="reviews-tab-navigation" class="tab-navigation">
                    <!-- Tabs generated by JS -->
                </div>
            </div>
            <div id="reviews-content">
                <!-- Content injected by JS -->
            </div>
        </div>
    `,
    
    // HTML Templates for different views
    adminReviewsViewHtml: `<h3>All Employee Reviews</h3><div style="text-align: right; margin-bottom: 20px;"><button id="conduct-review-btn" class="btn">Conduct New Review</button></div><div class="table-wrapper"><table id="reviews-table"></table></div>`,
    adminKPIsViewHtml: `<h3>Manage KPIs</h3><div style="text-align: right; margin-bottom: 20px;"><button id="add-kpi-btn" class="btn">Add New KPI</button></div><div class="table-wrapper"><table id="kpis-table"></table></div>`,
    employeeReviewsViewHtml: `<h3>My Performance Reviews</h3><div class="table-wrapper"><table id="my-reviews-table"></table></div>`,

    init: function() {
        if (app.currentUser.role === 'Admin') {
            this.setupAdminView();
        } else {
            this.setupEmployeeView();
        }
    },

    // ===================================================================
    // VIEW SETUP & TAB MANAGEMENT
    // ===================================================================
    setupAdminView: function() {
        const tabNav = document.getElementById('reviews-tab-navigation');
        tabNav.innerHTML = `<button id="tab-reviews" class="tab-btn active">Reviews</button><button id="tab-kpis" class="tab-btn">Manage KPIs</button>`;
        this.showAdminReviews();
        tabNav.querySelector('#tab-reviews').addEventListener('click', () => this.showAdminReviews());
        tabNav.querySelector('#tab-kpis').addEventListener('click', () => this.showAdminKPIs());
    },

    setupEmployeeView: function() {
        document.getElementById('reviews-tab-navigation').innerHTML = `<button id="tab-my-reviews" class="tab-btn active">My Reviews</button>`;
        this.showEmployeeReviews();
    },

    setActiveTab: function(tabId) { document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active')); document.getElementById(tabId)?.classList.add('active'); },
    showAdminReviews: function() { this.setActiveTab('tab-reviews'); document.getElementById('reviews-content').innerHTML = this.adminReviewsViewHtml; this.loadAdminReviews(); document.getElementById('conduct-review-btn').addEventListener('click', () => this.showConductReviewModal()); },
    showAdminKPIs: function() { this.setActiveTab('tab-kpis'); document.getElementById('reviews-content').innerHTML = this.adminKPIsViewHtml; this.loadKPIs(); document.getElementById('add-kpi-btn').addEventListener('click', () => this.showAddKPIModal()); },
    showEmployeeReviews: function() { this.setActiveTab('tab-my-reviews'); document.getElementById('reviews-content').innerHTML = this.employeeReviewsViewHtml; this.loadEmployeeReviews(); },

    // ===================================================================
    // ADMIN - REVIEWS
    // ===================================================================
    loadAdminReviews: async function() {
        const table = document.getElementById('reviews-table');
        table.innerHTML = `<thead><tr><th>Employee</th><th>Reviewer</th><th>Date</th><th>Rating</th><th>Actions</th></tr></thead><tbody><tr><td colspan="5">Loading...</td></tr></tbody>`;
        try {
            const { data, error } = await client.from('reviews').select(`*, employee:users!reviews_user_id_fkey(full_name), reviewer:users!reviews_reviewer_id_fkey(full_name)`).order('review_date', { ascending: false });
            if (error) throw error;
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = data.length === 0 ? '<tr><td colspan="5">No reviews conducted yet.</td></tr>' : data.map(rev => `
                <tr>
                    <td>${rev.employee?.full_name || 'N/A'}</td>
                    <td>${rev.reviewer?.full_name || 'N/A'}</td>
                    <td>${new Date(rev.review_date).toLocaleDateString()}</td>
                    <td>${this.renderStars(rev.overall_rating)}</td>
                    <td><button class="btn-small view-review-btn" data-id="${rev.id}">View Details</button></td>
                </tr>`).join('');
            table.querySelectorAll('.view-review-btn').forEach(btn => btn.addEventListener('click', e => this.showReviewDetailModal(e.target.dataset.id)));
        } catch (error) { console.error("Error loading reviews:", error); app.showToast('Could not load reviews.', 'error'); }
    },

    showConductReviewModal: async function() {
        const { data: users, error: userError } = await client.from('users').select('id, full_name').eq('is_active', true).order('full_name');
        if (userError) { app.showToast('Could not load employees.', 'error'); return; }
        const userOptions = users.map(u => `<option value="${u.id}">${u.full_name}</option>`).join('');

        const { data: kpis, error: kpiError } = await client.from('kpis').select('*').eq('is_active', true).order('title');
        if (kpiError) { app.showToast('Could not load KPIs.', 'error'); return; }
        const kpiFields = kpis.map(kpi => `
            <div class="kpi-score-item">
                <label>${kpi.title}</label>
                <select class="kpi-score" data-kpi-id="${kpi.id}" required><option value="">-- Score --</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option></select>
                <textarea class="kpi-notes" data-kpi-id="${kpi.id}" placeholder="Specific notes for this KPI..."></textarea>
            </div>
        `).join('');

        const formHtml = `
            <form id="new-review-form">
                <label for="review-employee">Select Employee:</label>
                <select id="review-employee" required><option value="">-- Select Employee --</option>${userOptions}</select>
                <label for="review-date">Review Date:</label>
                <input type="date" id="review-date" value="${new Date().toISOString().slice(0,10)}" required>
                <hr>
                <h4>KPI Scores</h4>
                <div class="kpi-scores-container">${kpiFields}</div>
                <hr>
                <h4>Overall Assessment</h4>
                <label for="overall-rating">Overall Rating:</label>
                <select id="overall-rating" required><option value="">-- Score --</option><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option></select>
                <label for="review-comments">Overall Comments:</label>
                <textarea id="review-comments" rows="4"></textarea>
            </form>
        `;
        app.showModal('Conduct New Performance Review', formHtml, { onSave: () => this.handleConductReview(), saveText: 'Save Review' });
    },

    handleConductReview: async function() {
        try {
            // --- STEP 1: READ THE VALUES FROM THE FORM ---
            const userId = document.getElementById('review-employee').value;
            const reviewDate = document.getElementById('review-date').value;
            const overallRating = document.getElementById('overall-rating').value;
            const comments = document.getElementById('review-comments').value;

            // --- STEP 2: DEBUGGING - LOG THE VALUES TO THE CONSOLE ---
            console.log("--- Conducting Review ---");
            console.log("Employee User ID:", userId, `(Type: ${typeof userId})`);
            console.log("Review Date:", reviewDate, `(Type: ${typeof reviewDate})`);
            console.log("Overall Rating:", overallRating, `(Type: ${typeof overallRating})`);
            console.log("-------------------------");
            
            // --- STEP 3: VALIDATION CHECK ---
            // We check if any of the required values are "falsy" (e.g., empty string "")
            if (!userId || !reviewDate || !overallRating) {
                app.showToast('Employee, date, and overall rating are required.', 'error');
                return; // Stop the function here
            }

            // Create the main review object to insert
            const review = {
                user_id: userId,
                reviewer_id: app.currentUser.id,
                review_date: reviewDate,
                overall_rating: overallRating,
                comments: comments
            };
            
            // Insert the main review record
            const { data: newReview, error: reviewError } = await client.from('reviews').insert(review).select().single();
            if (reviewError) throw reviewError;

            // Collect and insert the individual KPI scores
            const kpiScores = [];
            document.querySelectorAll('.kpi-score').forEach(scoreSelect => {
                if (scoreSelect.value) { // Only add if a score was selected
                    const kpiId = scoreSelect.dataset.kpiId;
                    const notes = document.querySelector(`.kpi-notes[data-kpi-id="${kpiId}"]`).value;
                    kpiScores.push({ review_id: newReview.id, kpi_id: kpiId, score: scoreSelect.value, notes: notes });
                }
            });

            if (kpiScores.length > 0) {
                const { error: kpiError } = await client.from('review_kpis').insert(kpiScores);
                if (kpiError) throw kpiError;
            }
            
            app.showToast('Review saved successfully!');
            app.hideModal();
            this.loadAdminReviews();

        } catch (error) { 
            console.error("Error saving review:", error); 
            app.showToast(error.message, 'error'); 
        }
    },

    // ===================================================================
    // ADMIN - KPIs
    // ===================================================================
    loadKPIs: async function() {
        const table = document.getElementById('kpis-table');
        table.innerHTML = `<thead><tr><th>Title</th><th>Description</th><th>Status</th><th>Actions</th></tr></thead><tbody><tr><td colspan="4">Loading...</td></tr></tbody>`;
        const { data, error } = await client.from('kpis').select('*').order('title');
        if (error) { app.showToast('Could not load KPIs.', 'error'); return; }
        const tbody = table.querySelector('tbody');
        tbody.innerHTML = data.length === 0 ? '<tr><td colspan="4">No KPIs defined yet.</td></tr>' : data.map(kpi => `
            <tr>
                <td>${kpi.title}</td><td>${kpi.description || ''}</td>
                <td><span class="status ${kpi.is_active ? 'active' : 'inactive'}">${kpi.is_active ? 'Active' : 'Inactive'}</span></td>
                <td class="actions">
                    <button class="btn-small edit-kpi-btn" data-id="${kpi.id}">Edit</button>
                    <button class="btn-small toggle-kpi-btn ${kpi.is_active ? 'btn-danger' : ''}" data-id="${kpi.id}" data-active="${kpi.is_active}">${kpi.is_active ? 'Deactivate' : 'Activate'}</button>
                </td>
            </tr>`).join('');
        table.querySelectorAll('.edit-kpi-btn, .toggle-kpi-btn').forEach(btn => btn.addEventListener('click', e => this.handleKPIAction(e)));
    },
    
    handleKPIAction: function(e) {
        const id = e.target.dataset.id;
        if (e.target.classList.contains('edit-kpi-btn')) this.showEditKPIModal(id);
        else if (e.target.classList.contains('toggle-kpi-btn')) this.handleToggleKPI(id, e.target.dataset.active === 'true');
    },

    showAddKPIModal: function() {
        const formHtml = `<form id="kpi-form"><label for="kpi-title">Title:</label><input type="text" id="kpi-title" required><label for="kpi-description">Description:</label><textarea id="kpi-description" rows="3"></textarea></form>`;
        app.showModal('Add New KPI', formHtml, { onSave: () => this.handleAddKPI(), saveText: 'Add KPI' });
    },

    handleAddKPI: async function() {
        const title = document.getElementById('kpi-title').value;
        const description = document.getElementById('kpi-description').value;
        if (!title) { app.showToast('Title is required.', 'error'); return; }
        try { await client.from('kpis').insert({ title, description }); app.showToast('KPI added.'); app.hideModal(); this.loadKPIs(); } catch (error) { app.showToast(error.message, 'error'); }
    },

    showEditKPIModal: async function(id) {
        const { data: kpi, error } = await client.from('kpis').select('*').eq('id', id).single();
        if (error) { app.showToast('Could not find KPI.', 'error'); return; }
        const formHtml = `<form id="kpi-form"><label for="kpi-title">Title:</label><input type="text" id="kpi-title" value="${kpi.title}" required><label for="kpi-description">Description:</label><textarea id="kpi-description" rows="3">${kpi.description || ''}</textarea></form>`;
        app.showModal('Edit KPI', formHtml, { onSave: () => this.handleUpdateKPI(id), saveText: 'Save Changes' });
    },

    handleUpdateKPI: async function(id) {
        const title = document.getElementById('kpi-title').value;
        const description = document.getElementById('kpi-description').value;
        if (!title) { app.showToast('Title is required.', 'error'); return; }
        try { await client.from('kpis').update({ title, description }).eq('id', id); app.showToast('KPI updated.'); app.hideModal(); this.loadKPIs(); } catch (error) { app.showToast(error.message, 'error'); }
    },

    handleToggleKPI: async function(id, isActive) {
        if (!confirm(`Are you sure you want to ${isActive ? 'deactivate' : 'activate'} this KPI?`)) return;
        try { await client.from('kpis').update({ is_active: !isActive }).eq('id', id); app.showToast(`KPI ${isActive ? 'deactivated' : 'activated'}.`); this.loadKPIs(); } catch (error) { app.showToast(error.message, 'error'); }
    },

    // ===================================================================
    // EMPLOYEE - REVIEWS
    // ===================================================================
    loadEmployeeReviews: async function() {
        const table = document.getElementById('my-reviews-table');
        table.innerHTML = `<thead><tr><th>Reviewer</th><th>Date</th><th>Rating</th><th>Actions</th></tr></thead><tbody><tr><td colspan="4">Loading...</td></tr></tbody>`;
        try {
            const { data, error } = await client.from('reviews').select(`*, reviewer:users!reviews_reviewer_id_fkey(full_name)`).eq('user_id', app.currentUser.id).order('review_date', { ascending: false });
            if (error) throw error;
            const tbody = table.querySelector('tbody');
            tbody.innerHTML = data.length === 0 ? '<tr><td colspan="4">You have no performance reviews yet.</td></tr>' : data.map(rev => `
                <tr>
                    <td>${rev.reviewer?.full_name || 'N/A'}</td>
                    <td>${new Date(rev.review_date).toLocaleDateString()}</td>
                    <td>${this.renderStars(rev.overall_rating)}</td>
                    <td><button class="btn-small view-review-btn" data-id="${rev.id}">View Details</button></td>
                </tr>`).join('');
            table.querySelectorAll('.view-review-btn').forEach(btn => btn.addEventListener('click', e => this.showReviewDetailModal(e.target.dataset.id)));
        } catch (error) { console.error("Error loading reviews:", error); app.showToast('Could not load your reviews.', 'error'); }
    },

    // ===================================================================
    // SHARED - VIEW REVIEW DETAILS
    // ===================================================================
    showReviewDetailModal: async function(reviewId) {
        try {
            const { data: review, error: revError } = await client.from('reviews').select(`*, employee:users!reviews_user_id_fkey(full_name), reviewer:users!reviews_reviewer_id_fkey(full_name)`).eq('id', reviewId).single();
            if (revError) throw revError;

            const { data: kpiData, error: kpiError } = await client.from('review_kpis').select(`score, notes, kpi:kpis(title)`).eq('review_id', reviewId);
            if (kpiError) throw kpiError;
            
            const kpiDetailsHtml = kpiData.length > 0 ? kpiData.map(item => `
                <div class="review-detail-kpi">
                    <div class="kpi-title">${item.kpi.title}</div>
                    <div class="kpi-score-display">${this.renderStars(item.score)}</div>
                    <div class="kpi-notes-display">${item.notes || '<em>No specific notes.</em>'}</div>
                </div>`).join('') : '<p>No specific KPI scores were recorded for this review.</p>';
            
            const modalContent = `
                <div class="review-detail-header">
                    <div><strong>Employee:</strong> ${review.employee.full_name}</div>
                    <div><strong>Reviewer:</strong> ${review.reviewer.full_name}</div>
                    <div><strong>Date:</strong> ${new Date(review.review_date).toLocaleDateString()}</div>
                </div>
                <hr>
                <h4>Overall Rating: ${this.renderStars(review.overall_rating)}</h4>
                <div class="review-detail-comments">
                    <strong>Comments:</strong>
                    <p>${review.comments || '<em>No overall comments provided.</em>'}</p>
                </div>
                <hr>
                <h4>KPI Breakdown</h4>
                <div class="review-detail-kpis-container">${kpiDetailsHtml}</div>
            `;
            app.showModal('Performance Review Details', modalContent);
        } catch (error) { app.showToast('Could not load review details.', 'error'); }
    },

    renderStars: (rating) => '<span class="stars">' + '★'.repeat(rating) + '☆'.repeat(5 - rating) + '</span>'
};